{"version":3,"sources":["components/MovieRow.js","App.js","serviceWorker.js","index.js","assets/olsen2.png"],"names":["MovieRow","movieurl","this","props","movie","id","window","location","href","react_default","a","createElement","src","poster","width","alt","title","overview","type","value","onClick","viewMovie","bind","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","moviesRow","handleChange","assertThisInitialized","searchTerm","_this2","urlstring","$","ajax","url","success","searchResults","console","log","results","forEach","poster_path","movies","components_MovieRow","key","push","setState","error","xhr","status","err","e","target","performSearch","style","backgroundColor","display","logo","height","fontSize","paddingTop","paddingLeft","paddingBottom","placeholder","onChange","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"6SA0BeA,sLAtBX,IAAMC,EAAS,mCAAqCC,KAAKC,MAAMC,MAAMC,GACrEC,OAAOC,SAASC,KAAKP,mCAGrB,OACEQ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAKV,KAAKC,MAAMC,MAAMS,OAAQC,MAAM,MAAMC,IAAI,MAErDN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKT,KAAKC,MAAMC,MAAMY,OACtBP,EAAAC,EAAAC,cAAA,SAAIT,KAAKC,MAAMC,MAAMa,UACrBR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,SAASC,MAAM,OAAOC,QAASlB,KAAKmB,UAAUC,KAAKpB,mBAhBtDqB,IAAMC,WCqHdC,cA/Gb,SAAAA,EAAYtB,GAAO,IAAAuB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAzB,KAAAuB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAzB,KAAAyB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA7B,KAAMC,KAyBD6B,MAAM,CACTC,UAAU,IAaXP,EAAKQ,aAAeR,EAAKQ,aAAaZ,KAAlBK,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAxCJA,6EA6CLU,GAAY,IAAAC,EAAAnC,KAElBoC,EAAU,4FAA4FF,EAC5GG,IAAEC,KAAK,CACDC,IAAKH,EACLI,QAAS,SAACC,GACRC,QAAQC,IAAI,oBACZ,IAAMC,EAAQH,EAAcG,QACxBb,EAAU,GACda,EAAQC,QAAQ,SAAC3C,GACfA,EAAMS,OAAO,iCAAiCT,EAAM4C,YACpDJ,QAAQC,IAAIzC,EAAMY,OAClB,IAAMiC,EAAOxC,EAAAC,EAAAC,cAACuC,EAAD,CAAUC,IAAK/C,EAAMC,GAAID,MAAOA,IAC7C6B,EAAUmB,KAAKH,KAIjBZ,EAAKgB,SAAS,CAACpB,UAAUA,KAE3BqB,MAAM,SAACC,EAAKC,EAAQC,GAClBb,QAAQU,MAAM,wDAKXI,GACX,IAAMtB,EAAWsB,EAAEC,OAAOxC,MAC1BjB,KAAK0D,cAAcxB,oCAInB,OACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOkD,MAAO,CACVC,gBAAiB,OACjBC,QAAS,UAEXtD,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,OAAKC,IAAKoD,IAAMjD,IAAI,cAAcD,MAAM,MAAMmD,OAAO,QACzDxD,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,qCAKVF,EAAAC,EAAAC,cAAA,SAAOkD,MAAO,CACVE,QAAS,QACTG,SAAU,GACVpD,MAAO,OACPqD,WAAY,OACZC,YAAa,MACbC,cAAe,QAEjBnD,KAAK,OACLoD,YAAY,mCACZC,SAAUrE,KAAKgC,eAIhBhC,KAAK8B,MAAMC,kBAzGFT,aCKEgD,QACW,cAA7BlE,OAAOC,SAASkE,UAEe,UAA7BnE,OAAOC,SAASkE,UAEhBnE,OAAOC,SAASkE,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.f0fd0c81.chunk.js","sourcesContent":["import React from 'react'\n\nclass MovieRow extends React.Component {\n  viewMovie() {\n    const movieurl=\"http://www.themoviedb.org/movie/\" + this.props.movie.id\n    window.location.href=movieurl\n  }\n  render() {\n    return (\n      <table>\n        <tbody>\n          <tr>\n            <td>\n              <img src={this.props.movie.poster} width=\"100\" alt=\"\" />\n            </td>\n            <td>\n              <h3>{this.props.movie.title}</h3>\n              <p>{this.props.movie.overview}</p>\n              <input type=\"button\" value=\"view\" onClick={this.viewMovie.bind(this)} />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    )\n  }\n}\nexport default MovieRow;\n","import React, { Component } from 'react';\nimport logo from './assets/olsen2.png';\nimport './App.css';\nimport $ from 'jquery'\nimport MovieRow from './components/MovieRow';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    // const movies=[\n    //   {\n    //     id:0,\n    //     title:\"Royal Hibiscus Hotel\",\n    //     overview: \"romantic drama film starring Ini Dima and Zainab Balogun\",\n    //     poster: \"./assets/wikimediaib.png\"\n    //   },\n    //\n    //   {\n    //     id:1,\n    //     title:\"State of Emergency\",\n    //     overview: \"action drama film starring Saint Obi\",\n    //     poster: \"./assets/wikimediaib.png\"\n    //   },\n    //\n    //   {\n    //     id:2,\n    //     title:\"Sylvia\",\n    //     overview: \"supernatural film featuring OC Ukeje\",\n    //     poster: \"./assets/wikimediaib.png\"\n    //   }\n    // ]\n\n    this.state={\n      moviesRow:[]\n    }\n\n    //this.performSearch(\"home alone\")\n\n    /* movies.forEach((movie) => {\n       const movieRow= <MovieRow movie={movie}/>\n       moviesRow.push(movieRow)\n       //moviesRow.push(<p>Movie Title: {movie.title}</p>); also valid\n     })\n     this.state={moviesRow}\n     */\n\n     this.handleChange = this.handleChange.bind(this);\n     //this.performSearch = this.performSearch.bind(this);\n\n  }\n\n  performSearch(searchTerm) {\n    //const urlstring=\"https://api.themoviedb.org/3/search/movie?api_key=32c1b40476e790c09dd7a69d408bed32&query=avengers\"\n    const urlstring=\"https://api.themoviedb.org/3/search/movie?api_key=32c1b40476e790c09dd7a69d408bed32&query=\"+searchTerm\n    $.ajax({\n          url: urlstring,\n          success: (searchResults) => {\n            console.log(\"Fetch successful\")\n            const results=searchResults.results\n            var moviesRow=[]\n            results.forEach((movie) => {\n              movie.poster=\"http://image.tmdb.org/t/p/w185\"+movie.poster_path\n              console.log(movie.title)\n              const movies=<MovieRow key={movie.id} movie={movie}/>\n              moviesRow.push(movies)\n\n            })\n\n            this.setState({moviesRow:moviesRow})\n          },\n          error:(xhr, status, err) => {\n            console.error(\"fetch failed\")\n          }\n    })\n  }\n\n  handleChange(e) {\n    const searchTerm=e.target.value\n    this.performSearch(searchTerm)\n  }\n\n  render() {\n    return (\n      <div>\n        <table style={{\n            backgroundColor: 'grey',\n            display: 'block'\n          }}>\n          <tbody>\n            <tr>\n              <td><img src={logo} alt=\"wikimediaib\" width=\"10%\" height=\"8%\"></img></td>\n              <td><h1>Movie-DB Search App</h1></td>\n            </tr>\n          </tbody>\n        </table>\n\n        <input style={{\n            display: 'block',\n            fontSize: 25,\n            width: '100%',\n            paddingTop: '20px',\n            paddingLeft: '7px',\n            paddingBottom: '20px'\n          }}\n          type=\"text\"\n          placeholder=\"enter a movie you want to search\"\n          onChange={this.handleChange}\n          >\n        </input>\n\n        {this.state.moviesRow}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/olsen2.b24a0817.png\";"],"sourceRoot":""}